{"version":3,"sources":["news/card.js","news/index.jsx","App.js","serviceWorker.js","index.js"],"names":["card","props","className","src","img","alt","title","description","News","state","news","flag","Save","data","setState","articles","fetch","header","accept","method","then","response","json","console","log","catch","err","onClick","this","map","item","urlToImage","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"mMASeA,G,KAPF,SAACC,GACZ,OAAO,yBAAKC,UAAU,aACpB,yBAAKA,UAAU,MAAMC,IAAKF,EAAMG,IAAKC,IAAI,KACzC,yBAAKH,UAAU,QAAO,uBAAGA,UAAU,QAAb,MAAwBD,EAAMK,OAAU,6BAC5D,iCAAOL,EAAMM,iBC+DJC,E,4MAjEbC,MAAQ,CACNC,KAAM,GACNC,MAAM,G,EAuBRC,KAAO,SAACC,GACN,EAAKC,SAAS,CACZJ,KAAMG,EAAKE,Y,kEAtBM,IAAD,OAQlBC,MANE,sGACa,CACbC,OAAQ,CAAEC,OAAQ,oBAClBC,OAAQ,QAIPC,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACP,GACLU,QAAQC,IAAIX,GACZ,EAAKD,KAAKC,MAEXY,OAAM,SAACC,GACNH,QAAQC,IAAIE,Q,+BAQR,IAAD,OACP,OACE,yBAAKxB,UAAU,qBAgBb,4BAAQyB,QAAS,kBAAM,EAAKb,SAAS,CAAEH,MAAO,EAAKF,MAAME,SAAzD,WAGCiB,KAAKnB,MAAME,MACViB,KAAKnB,MAAMC,KAAKmB,KAAI,SAACC,GACnB,OACE,kBAAC,EAAD,CACE1B,IAAK0B,EAAKC,WACVzB,MAAOwB,EAAKxB,MACZC,YAAauB,EAAKvB,sB,GA1DfyB,aCOJC,MANf,WACE,OACE,kBAAC,EAAD,OCMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdvB,OAAM,SAAAwB,GACL1B,QAAQ0B,MAAMA,EAAMC,a","file":"static/js/main.08622d9e.chunk.js","sourcesContent":["import React from 'react';\r\nimport './style.css'\r\nconst card = (props) => {\r\n  return <div className=\"container\" >\r\n    <img className=\"img\" src={props.img} alt=\"\" />\r\n    <div className=\"desc\"><p className=\"head\">   {props.title}</p><br />\r\n      <p>   {props.description}</p></div>\r\n  </div>\r\n}\r\nexport default card;","import React, { Component } from \"react\";\r\nimport Card from \"./card\";\r\nimport \"./style.css\";\r\nclass News extends Component {\r\n  state = {\r\n    news: [],\r\n    flag: false,\r\n  };\r\n\r\n  componentDidMount() {\r\n    const url =\r\n      \"https://newsapi.org/v2/top-headlines?sources=google-news-in&apiKey=b2c04a557c9a440b9c08d7682cba9d9c\";\r\n    const config = {\r\n      header: { accept: \"application/json\" },\r\n      method: \"GET\",\r\n    };\r\n\r\n    fetch(url, config)\r\n      .then((response) => {\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        console.log(data);\r\n        this.Save(data);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }\r\n  Save = (data) => {\r\n    this.setState({\r\n      news: data.articles,\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"biggest-container\">\r\n        {/* <button\r\n          onClick={() => {\r\n            this.state.news.map((item) => {\r\n              return (\r\n                <Card\r\n                  img={item.urlToImage}\r\n                  title={item.title}\r\n                  description={item.description}\r\n                />\r\n              );\r\n            });\r\n          }}\r\n        >\r\n          click To show\r\n        </button> */}\r\n        <button onClick={() => this.setState({ flag: !this.state.flag })}>\r\n          Display\r\n        </button>\r\n        {this.state.flag &&\r\n          this.state.news.map((item) => {\r\n            return (\r\n              <Card\r\n                img={item.urlToImage}\r\n                title={item.title}\r\n                description={item.description}\r\n              />\r\n            );\r\n          })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default News;\r\n","import React from 'react';\r\nimport News from './news';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <News />\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}